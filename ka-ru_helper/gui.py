import customtkinter
import json
import vosk
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression
import pyaudio
from playsound import playsound  # v1.2.2 only!


data_set_kz = {
'Транскрипт қалай алуға болады?': 'Платонус жүйесінде БАҚҚО-жеке кабинет бөліміне өтіңіз. Офис тіркеуші арқылы транскрипт беру категориясын таңдаңыз. Қызмет түрі-транскрипт. Тапсырыс беру батырмасын басып, жеке мәліметтеріңізді енгізіңіз. Жеке куәлік көшірмесін салыңыз. Анықтаманы алу себебіңізді нақтылап жазыңыз. Тапсырысты растаңыз.',
"Жұмыспен қамту орталығына анықтама қалай алады?": "Платонус жүйесінде БАҚҚО-жеке кабинет бөліміне өтіңіз. Автоуслуги категориясын таңдаңыз. Қызмет түрі-'Жұмыспен қамту' орталығына арналған анықтама. Тапсырыс беру батырмасын басып, жеке мәліметтеріңізді енгізіңіз. Жеке куәлік көшірмесін салыңыз. Анықтаманы алу себебіңізді нақтылап жазыңыз. Тапсырысты растаңыз.",
"Шет елге магистратураға түсу үшін анықтама қалай алынады?": "Платонус жүйесінде БАҚҚО-жеке кабинет бөліміне өтіңіз. Автоуслуги категориясын таңдаңыз. Қызмет түрі-Шет елге магистратураға түсуге арналған анықтама. Тапсырыс беру батырмасын басып, жеке мәліметтеріңізді енгізіңіз.Жеке куәлік көшірмесін салыңыз. Анықтаманы алу себебіңізді нақтылап жазыңыз.  Тапсырысты растаңыз.",
"Әкімшілікке арналған анықтама қалай алады?": "Платонус жүйесінде БАҚҚО-жеке кабинет бөліміне өтіңіз. Автоуслуги категориясын таңдаңыз. Қызмет түрі-әкімшілікке арналған анықтама. Тапсырыс беру батырмасын басып, жеке мәліметтеріңізді енгізіңіз. Тапсырысты растаңыз.",
"Басқа ЖОО ауыстыру туралы өтініш қалай алады?": "Платонус жүйесінде БАҚҚО-жеке кабинет бөліміне өтіңіз. Өтініш қабылдау категориясын таңдаңыз. Қызмет түрі-Басқа ЖОО ауыстыруға өтініш. Тапсырыс беру батырмасын басып, жеке мәліметтеріңізді енгізіңіз.Жеке куәлік көшірмесін салыңыз. Анықтаманы алу себебіңізді нақтылап жазыңыз.  Тапсырысты растаңыз.",
"Визаға құжат әзірлеуге арналған анықтама қалай алады?": "Платонус жүйесінде БАҚҚО-жеке кабинет бөліміне өтіңіз. Анықтаманы тіркеу бөлімі арқылы беру категориясын таңдаңыз. Қызмет түрі-Визаға құжат әзірлеуге арналған анықтама. Тапсырыс беру батырмасын басып, жеке мәліметтеріңізді енгізіңіз. Жеке куәлік көшірмесін салыңыз. Анықтаманы алу себебіңізді нақтылап жазыңыз. Тапсырысты растаңыз.",
"Қосымша ЗТЖМО-4 анықтамасын қалай алуға болады?": "Платонус жүйесінде БАҚҚО-жеке кабинет бөліміне өтіңіз. Анықтаманы тіркеу бөлімі арқылы беру категориясын таңдаңыз. Қызмет түрі-Қосымша ЗТЖМО-4 анықтамасы. Тапсырыс беру батырмасын басып, жеке мәліметтеріңізді енгізіңіз. Жеке куәлік көшірмесін салыңыз. Анықтаманы алу себебіңізді нақтылап жазыңыз.  Тапсырысты растаңыз.",
"Қосымша ЗЖМТО-6 анықтамасын қалай алуға болады?": "Платонус жүйесінде БАҚҚО-жеке кабинет бөліміне өтіңіз. Анықтаманы тіркеу бөлімі арқылы беру категориясын таңдаңыз. Қызмет түрі-Қосымша ЗТЖМО-6 анықтамасы. Тапсырыс беру батырмасын басып, жеке мәліметтеріңізді енгізіңіз. Жеке куәлік көшірмесін салыңыз. Анықтаманы алу себебіңізді нақтылап жазыңыз. Тапсырысты растаңыз.",
"Қосымша семестрге қатысуға өтініш қалай алады?": "Платонус жүйесінде БАҚҚО-жеке кабинет бөліміне өтіңіз. Өтініш қабылдау категориясын таңдаңыз. Қызмет түрі-жазғы/қосымша семестрге қатысуға өтініш. Тапсырыс беру батырмасын басып, жеке мәліметтеріңізді енгізіңіз. Жеке куәлік көшірмесін салыңыз. Анықтаманы алу себебіңізді нақтылап жазыңыз. Тапсырысты растаңыз.",
"   ": "Don`t understand"}

audio_set_kz = {
'Транскрипт қалай алуға болады?': ['01-01.wav', '01-02.wav'],
"Жұмыспен қамту орталығына анықтама қалай алады?": ['02-01.wav', '01-02.wav'],
"Шет елге магистратураға түсу үшін анықтама қалай алынады?": ['03-01.wav', '01-02.wav'],
"Әкімшілікке арналған анықтама қалай алады?": ['04-01.wav'],
"Басқа ЖОО ауыстыру туралы өтініш қалай алады?": ['05-01.wav', '01-02.wav'],
"Визаға құжат әзірлеуге арналған анықтама қалай алады?": ['06-01.wav', '01-02.wav'],
"Қосымша ЗТЖМО-4 анықтамасын қалай алуға болады?": ['07-01.wav', '01-02.wav'],
"Қосымша ЗЖМТО-6 анықтамасын қалай алуға болады?": ['08-01.wav', '01-02.wav'],
"Қосымша семестрге қатысуға өтініш қалай алады?": ['09-01.wav', '01-02.wav'],
"   ": ['1.wav']
}


data_set_ru = {
'Как получить транскрипт?': 'В системе Platonus перейдите в раздел ЦОО-личный кабинет. Выберите категорию подачи транскрипт через офис регистратора. Тип услуги - транскрипт. Нажмите кнопку заказа и введите свои личные данные. Приложите копию своего удостоверения личности. Укажите причину получения справки. Подтвердите заказ.',
'Как получить справку для предъявления в АО "Центр занятости"?': 'В системе Platonus перейдите в раздел ЦОО-личный кабинет. Выберите категорию автоуслиги. Тип услуги - справка для центра "Занятость". Нажмите кнопку заказа и введите свои личные данные. Приложите копию своего удостоверения личности. Укажите причину получения справки. Подтвердите заказ.',
'Как получить справку для поступления на магистратуру за границей?': 'В системе Platonus перейдите в раздел ЦОО-личный кабинет. Выберите категорию автоуслиги. Тип услуги - справка для поступления на магистратуру за границей". Нажмите кнопку заказа и введите свои личные данные. Приложите копию своего удостоверения личности. Укажите причину получения справки. Подтвердите заказ.',
'Как получить справку для акимата?': 'В системе Platonus перейдите в раздел ЦОО-личный кабинет. Выберите категорию автоуслиги. Тип услуги - справка для акимата. Нажмите кнопку заказа и введите свои личные данные. Приложите копию своего удостоверения личности. Укажите причину получения справки. Подтвердите заказ.',
'Заявление о переводе в другой ВУЗ?': 'В системе Platonus перейдите в раздел ЦОО-личный кабинет. Выберите категорию прием заявок. Тип услуги -заявление о переводе в другой ВУЗ. Нажмите кнопку заказа и введите свои личные данные. Приложите копию своего удостоверения личности. Укажите причину получения справки. Подтвердите заказ.',
'Заявление на участие в летнем/дополнительном семестре?': 'В системе Platonus перейдите в раздел ЦОО-личный кабинет. Выберите категорию прием заявок. Тип услуги -заявление на участие в летнем/дополнительном семестре. Нажмите кнопку заказа и введите свои личные данные. Приложите копию своего удостоверения личности. Укажите причину получения справки. Подтвердите заказ.',
'Как получить справку ГЦВП Приложение-№4': 'В системе Platonus перейдите в раздел ЦОО-личный кабинет. Выберите категорию подачи ссылки через раздел регистрации. Тип услуги-справка ГЦВП Приложение-№4. Нажмите кнопку заказа и введите свои личные данные. Приложите копию своего удостоверения личности. Укажите причину получения справки. Подтвердите заказ.',
'Как получить справку ГЦВП Приложение-№6': 'В системе Platonus перейдите в раздел ЦОО-личный кабинет. Выберите категорию подачи ссылки через раздел регистрации. Тип услуги-справка ГЦВП Приложение-№6. Нажмите кнопку заказа и введите свои личные данные. Приложите копию своего удостоверения личности. Укажите причину получения справки. Подтвердите заказ',
'Как получить справку для визы?': 'В системе Platonus перейдите в раздел ЦОО-личный кабинет. Выберите категорию подачи ссылки через раздел регистрации. Тип услуги-справка для визы. Нажмите кнопку заказа и введите свои личные данные. Приложите копию своего удостоверения личности. Укажите причину получения справки. Подтвердите заказ',
"   ": "Don`t understand"
}

audio_set_ru = {
'Как получить транскрипт?': ['21-01.mp3'],
'Как получить справку для предъявления в АО "Центр занятости"?': ['22-01.mp3'],
'Как получить справку для поступления на магистратуру за границей?': ['23-01.mp3'],
'Как получить справку для акимата?': ['24-01.mp3'],
'Заявление о переводе в другой ВУЗ?': ['25-01.mp3'],
'Заявление на участие в летнем/дополнительном семестре?': ['26-01.mp3'],
'Как получить справку ГЦВП Приложение-№4': ['27-01.mp3'],
'Как получить справку ГЦВП Приложение-№6': ['28-01.mp3'],
'Как получить справку для визы?': ['29-01.mp3'],
"   ": ['21.mp3']
}

class Gui(customtkinter.CTk):
    def __init__(self):
        super().__init__()
        self.title('Assistant')
        self.geometry('410x260')
        self.tab_names = ["Сұрау/Спросить", "About"]
        self.tabview = customtkinter.CTkTabview(self, width=400, height=250)
        self.tabview.pack()

        [self.tabview.add(tab) for tab in self.tab_names]

        Ask(self.tabview.tab("Сұрау/Спросить")).pack(fill='both', expand=True)
        About(self.tabview.tab("About")).pack(fill='both', expand=True)

        for item in self.tab_names:
            customtkinter.CTkLabel(self.tabview.tab(item),
                                   text='v.0.1 by StripedBear', font=('Arial', 10)).pack()


class Ask(customtkinter.CTkFrame):
    def __init__(self, parent):
        super().__init__(parent)
        self.parent = parent



        self.lang = 'Қазақша'
        self.combobox_var = customtkinter.StringVar(value="Қазақша")
        self.combobox = customtkinter.CTkOptionMenu(self, values=["Қазақша", "Русский"],
                                                    command=self.combobox_callback,
                                                    variable=self.combobox_var)
        self.combobox.pack(padx=20, pady=30)

        self.open_button = customtkinter.CTkButton(self, text='Сұрау', command=self.ask)
        self.open_button.pack(padx=20, pady=10)

    def combobox_callback(self, choice):
        if choice == 'Қазақша':
            self.lang = 'Қазақша'
            self.open_button.configure(text='Сұрау')
        else:
            self.lang = 'Русский'
            self.open_button.configure(text='Спросить')

    def ask(self):
        self.begin()

    def recognizer(self, data, data_set):
        text_vector = vectorizer.transform([data]).toarray()[0]
        answer = clf.predict([text_vector])[0]
        for k, v in data_set[0].items():
            if v == answer:
                print(f'{k}: {answer}')
                self.play_answer(data_set[1][k])
                break

    def play_answer(self, answer_list):
        for sound in answer_list:
            playsound(sound)

    def speech_to_text(self, lang):
        model = vosk.Model(lang)
        rec = vosk.KaldiRecognizer(model, 16000)
        mic = pyaudio.PyAudio()
        stream = mic.open(format=pyaudio.paInt16, channels=1, rate=16000, input=True, frames_per_buffer=8000)
        stream.start_stream()

        while True:
            print('Listening...')
            data = stream.read(4000, exception_on_overflow=False)
            if rec.AcceptWaveform(data) and (len(data)) > 0:
                speech = json.loads(rec.Result())['text']
                if len(speech.replace(' ', '')) > 1:
                    return speech
                else:
                    print('Not recognize')
                    # self.update_textbox('Not recognize')

    def begin(self):
        lang = {'Қазақша': 'kz', 'Русский': 'ru'}[self.combobox.get()]
        if lang == 'kz':
            data_set = [data_set_kz, audio_set_kz]
        else:
            data_set = [data_set_ru, audio_set_ru]
        vectors = vectorizer.fit_transform(list(data_set[0].keys()))
        clf.fit(vectors, list(data_set[0].values()))

        stt = self.speech_to_text(lang)
        self.recognizer(stt, data_set)


class About(customtkinter.CTkFrame):
    def __init__(self, parent):
        super().__init__(parent)
        self.textbox = customtkinter.CTkTextbox(self, width=400, height=200, corner_radius=8)
        self.textbox.pack()

        self.text = 'Бағдарлама туралы - Ақжан Сәкенованың дипломдық жобасының дауыстық көмекшісі.\n\n\n\n' \
                    'Голосовой помощник для дипломного проекта Акжан Сакеновой.'
        self.textbox.insert("0.0", self.text)
        self.textbox.configure(state="disabled")


def close_window():
    program.destroy()


if __name__ == '__main__':
    vectorizer = CountVectorizer()
    clf = LogisticRegression()

    customtkinter.set_appearance_mode("light")
    customtkinter.set_default_color_theme("blue")
    program = Gui()
    program.protocol('WM_DELETE_WINDOW', close_window)
    program.mainloop()

# https://issai.nu.edu.kz/tts2-eng/
# pyinstaller --clean --onedir --console --noupx "D:/kwork/kwork/gui.py" --add-data "d:\kwork\kwork\venv\lib\site-packages\customtkinter;customtkinter/" --add-data "D:\kwork\kwork\answers;answers" --add-data "D:\kwork\kwork\kz;kz/" --add-data "D:\kwork\kwork\ru;ru/" --add-data "D:\kwork\kwork\tabs;tabs/" --add-data "D:\kwork\kwork\library.py;library.py" --add-data "D:\kwork\kwork\main.py;main.py"
# pyinstaller --noconfirm  "D:\kwork\pycha\kwork\gui.spec"